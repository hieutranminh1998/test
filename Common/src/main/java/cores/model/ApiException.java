/*
 * API Banking Mambu
 * Rest API for consumer app
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cores.model;

import java.util.List;
import java.util.Map;

import com.example.bean.ErrorResponse;
import com.example.bean.MambuError;
import money.cltn.db.util.StringUtil;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-03T15:20:57.194+07:00")
public class ApiException extends Exception {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int code = 0;
    private Map<String, List<String>> responseHeaders = null;
    private String responseBody = null;
    
    private ErrorResponse errorResponse;
    
    private RestError restError;;
    
    public String getOriginalError() {
    	if(StringUtil.isNotEmpty(this.getResponseBody()) && this.getResponseBody().contains("-")) {
    		return this.getResponseBody().split("-")[0];
    	}else {
    		return code+"";
    	}
    	
    }

    public ErrorResponse getErrorResponse() {
		return errorResponse;
	}
    public RestError getRestError() {
    	try {
    		if(this.restError!=null) {
    			return this.restError;
    		}
    		return this.errorResponse.getErrors().get(0);
    	}catch (Exception e) {
			return null;
		}
    }
    

	public void setRestError(RestError restError) {
		this.restError = restError;
	}
	public void setErrorResponse(ErrorResponse errorResponse) {
		this.errorResponse = errorResponse;
	}

	public ApiException() {}

    public ApiException(Throwable throwable) {
        super(throwable);
    }

    public ApiException(String message) {
        super(message);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        super(message, throwable);
        this.code = code;
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
    }

    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this(message, (Throwable) null, code, responseHeaders, responseBody);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {
        this(message, throwable, code, responseHeaders, null);
    }

    public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this((String) null, (Throwable) null, code, responseHeaders, responseBody);
    }

    public ApiException(int code, String message) {
        super(message);
        this.code = code;
    }
    public ApiException(int code, String message,String sourceError) {
        super(message);
        this.code = code;
        RestError restError = new RestError(code,message);
        if(checkTimeoutKeywork(message)) {
        	restError.setTimeout(true);
        }
        restError.setErrorSource(sourceError);
        errorResponse = new ErrorResponse(restError);
    }
    private boolean checkTimeoutKeywork(String message) {
    	if(message!=null && (
    			message.contains("504") ||
        		message.contains("time-out") || 
        		message.contains("timeout")|| 
        		message.contains("time out") || 
        		message.contains("timed out"))) {
    		return true;
    	}
    	return false;
    }
    public ApiException(int code, ErrorMapping errorMapping, boolean isTimeout) {
        super(errorMapping.getErrorMessage());
        this.code = code;
        RestError restError = new RestError(code,errorMapping.getErrorMessage());
        if(isTimeout ||  checkTimeoutKeywork(errorMapping.getErrorMessage()) || errorMapping.isTimeout() ) {
        	restError.setTimeout(true);
        }
        restError.setErrorSource(errorMapping.getProvider());
        errorResponse = new ErrorResponse(restError);
    }
    public ApiException(MambuError mambuError) {
        super(mambuError.getMessage());
        this.code = mambuError.getCode();
        RestError restError = new RestError(mambuError);
        errorResponse = new ErrorResponse(restError);
    }
    public ApiException(RestError restError) {
        super(restError.getErrorReason());
        this.code = restError.getErrorCode();
        errorResponse = new ErrorResponse(restError);
    }
    
    public ApiException(int code, String message, Map<String, List<String>> responseHeaders, String responseBody) {
        this(code, message);
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
    }

    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    public int getCode() {
        return code;
    }

    /**
     * Get the HTTP response headers.
     *
     * @return A map of list of string
     */
    public Map<String, List<String>> getResponseHeaders() {
        return responseHeaders;
    }

    /**
     * Get the HTTP response body.
     *
     * @return Response body in the form of string
     */
    public String getResponseBody() {
    	if(responseBody==null && this.getMessage()!=null) {
    		return this.getMessage();
    	}
        return responseBody;
    }
}
